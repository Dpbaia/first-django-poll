from django.http import HttpResponseRedirect
from django.shortcuts import get_object_or_404, render
from django.urls import reverse
from django.views import generic
from django.utils import timezone

from .models import Choice, Question

# Generic "display a list of objects" view. (index!)
class IndexView(generic.ListView):
    template_name = 'polls/index.html'
    # Above used to tell django to use a specific template name instead of an autogenerated deafult
    context_object_name = 'latest_question_list'
    # However, for ListView, the automatically generated context variable is question_list. 
    # To override this we provide the context_object_name attribute, specifying that we want to use latest_question_list instead. 

    def get_queryset(self):
        """
        Return the last five published questions (not including those set to be
        published in the future).
        """
        return Question.objects.filter(
            pub_date__lte=timezone.now()
        ).order_by('-pub_date')[:5]



# Generic "display details of an object" view. (show!)
class DetailView(generic.DetailView):
    model = Question
    template_name = 'polls/detail.html'
    
    def get_queryset(self):
        """
        Excludes any questions that aren't published yet.
        """
        return Question.objects.filter(pub_date__lte=timezone.now())


class ResultsView(generic.DetailView):
    model = Question
    template_name = 'polls/results.html'
    # Different template name from detail needed to make sure they'll show different things

"""
BELOW IS AN EXAMPLE OF USING A NON-GENERIC VIEW! Not in Use!
"""

# def results(request, question_id):
#     question = get_object_or_404(Question, pk=question_id)
#     return render(request, 'polls/results.html', {'question': question})
    #Also exists: get_list_or_404(), but USE filt() instead of get()

def vote(request, question_id):
    question = get_object_or_404(Question, pk=question_id)
    try:
        selected_choice = question.choice_set.get(pk=request.POST['choice'])
        #request.POST allows you to access submitted data by key name.
        # Returns ID of the selected choice, as a string. ALWAYS a string.
    except (KeyError, Choice.DoesNotExist):
        return render(request, 'polls/detail.html', {
            'question': question,
            'error_message': "You didn't select a choice.",
        })
    else:
        selected_choice.votes += 1
        selected_choice.save()
        # Always return an HttpResponseRedirect after successfully dealing
        # with POST data. This prevents data from being posted twice if a
        # user hits the Back button.
    return HttpResponseRedirect(reverse('polls:results', args=(question.id,)))
    # HttpResponseRedirect:  ALWAYS return like this when dealing with a POST data  to avoid posting twice when user goes back
    # reverse: as to not lose the value (e.g. that we are in the question 3 and want to see the results to question 3)
